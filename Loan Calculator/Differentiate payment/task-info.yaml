type: edu
custom_name: stage4
files:
- name: creditcalc/creditcalc.py
  visible: true
  text: |
    import math
    from math import log


    def monthly_payments():
        print("Enter the loan principal:")
        p = float(input())
        print("Enter the monthly payment:")
        monthly_payments = int(input())
        print("Enter the loan interest")
        loan_interest = float(input())

        # calculates nominal interest rate Note: () need to be there
        i = loan_interest / (12 * 100)

        # calculates number of months
        n = math.ceil(log(monthly_payments / (monthly_payments - i * p), 1 + i))

        #  calculates years and months by taking total number of months and dividing by 12
        total_years = math.floor(n / 12)
        total_months = math.ceil(n - (total_years * 12))

        #  multiple years with no months
        if total_years > 1 and total_months == 0:
            print(f"It will take {total_years} years to repay the loan!")

        # multiple years and multiple months
        elif total_years > 1 and total_months > 1:
            print(f"It will take {total_years} years and {total_months} months to repay this loan!")

        #  1 year and no months
        elif total_years == 1 and total_months == 0:
            print(f"It will take {total_years} year to repay the loan!")

        #  1 year and one month
        elif total_years == 1 and total_months == 1:
            print(f"It will take {total_years} year and {total_months} month to repay this loan! ")

        #  1 year and several months
        elif total_years == 1 and total_months > 1:
            print(f"It will take  {total_years} year and {total_months} months to repay this loan!")

        #  0 years and Several months
        elif total_years == 0 and total_months > 1:
            print(f"It will take {total_months} months to repay this loan!")

        #  0 years and 1 month
        elif total_years == 0 and total_months == 1:
            print(f"It will take {total_months} month to repay this loan!")


    def annuity():
        print("Enter the loan principal:")
        p = int(input())
        print("Enter the number of periods:")
        n = int(input())
        print("Enter the loan interest:")
        interest_rate = float(input())

        #  Gets nominal interest rate
        i = interest_rate / (12 * 100)

        #  Calculates annuity
        annuity_payment = math.ceil(p * ((i * pow((1 + i), n)) / (pow((1 + i), n) - 1)))

        print(annuity_payment)

        print(f"Your monthly payment = {annuity_payment}!")


    def loan_principal():
        print("Enter the annuity payment:")
        annuity_payment = float(input())
        print("Enter the number of periods")
        n = int(input())
        print("Enter the loan interest:")
        # testing ceil
        interest_rate = float(input())
        i = interest_rate / (12 * 100)
        #
        principal = math.ceil(annuity_payment / ((i * (pow((1 + i), n))) / ((pow((1 + i), n)) - 1)))

        print(f"Your loan principal = {principal}!")


    print("What do you want to calculate?")
    print('type "n" for number of monthly payments,')
    print('type "a" for annuity monthly payment amount,')
    print('type "p" for the monthly payment:')
    type_of_calculation = input()
    if type_of_calculation == "n":
        monthly_payments()
    elif type_of_calculation == "a":
        annuity()
    elif type_of_calculation == "p":
        loan_principal()
  learner_created: false
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import StageTest
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult
    import re

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class LoanCalcTest(StageTest):
        def generate(self):
            return [
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=8722',
                        '--periods=120',
                        '--interest=5.6',
                    ],
                    attach=('principal', 800018, 246622),
                ),
                TestCase(
                    args=[
                        '--type=annuity',
                        '--payment=6898',
                        '--periods=240',
                        '--interest=3.4',
                    ],
                    attach=('principal', 1199997, 455523),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=8',
                        '--interest=9.8',
                    ],
                    attach=('payment', 129638, 37104),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--periods=60',
                        '--interest=10',
                    ],
                    attach=('payment', 274880, 21248),
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=500000',
                        '--payment=23000',
                        '--interest=7.8',
                    ],
                    attach=('periods', 52000, 24),
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=1000000',
                        '--periods=10',
                        '--interest=10',
                    ],
                    attach=[
                        108334,
                        107500,
                        106667,
                        105834,
                        105000,
                        104167,
                        103334,
                        102500,
                        101667,
                        100834,
                        45837,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=500000',
                        '--periods=8',
                        '--interest=7.8',
                    ],
                    attach=[
                        65750,
                        65344,
                        64938,
                        64532,
                        64125,
                        63719,
                        63313,
                        62907,
                        14628,
                    ],
                ),

                TestCase(
                    args=[
                        '--type=annuity',
                        '--principal=1000000',
                        '--payment=104000',
                    ],
                    attach='Incorrect',
                ),

                TestCase(
                    args=[
                        '--type=diff',
                        '--principal=-1000000',
                        '--payment=104000',
                        '--periods=8',
                    ],
                    attach='Incorrect',
                ),

            ]

        def check(self, reply, attach):
            if attach == 'Incorrect':
                if attach.lower() in reply.lower():
                    return CheckResult.correct()

                return CheckResult.wrong(
                    'Parameters are incorrect. '
                    'Just output "Incorrect parameters"'
                )

            numbers = re.findall(r'[-+]?(\d*\.\d+|\d+)', reply)
            if len(numbers) == 0:
                return CheckResult.wrong(
                    'No numbers in the answer',
                )

            if isinstance(attach, tuple):
                if attach[0] == 'periods':
                    years = int(attach[2] / 12)
                    months = str(int(attach[2] % 12))
                    for i in numbers:
                        if abs(attach[1] - float(i)) < 2:
                            if str(months) in numbers or str(years) in numbers:
                                return CheckResult.correct()

                    if years == 0:
                        output = (
                            'Looks like your periods '
                            'calculations aren\'t working properly. '
                            'Correct months and overpayment are '
                            '[ {0}, {1} ]'
                            ', but you output: {2}'
                        )
                        return CheckResult.wrong(
                            output.format(attach[2], attach[1], numbers),
                        )
                    else:
                        if months != '0':
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years, months and overpayment are '
                                '[ {0}, {1}, {2} ]'
                                ', but you output: {3}'
                            )
                            return CheckResult.wrong(
                                output.format(years, months, attach[1], numbers),
                            )
                        else:
                            output = (
                                'Looks like your periods '
                                'calculations aren\'t working properly. '
                                'Correct years and overpayment are '
                                '[ {0}, {1} ]'
                                ', but you output: {2}'
                            )
                            return CheckResult.wrong(
                                output.format(years, attach[1], numbers),
                            )
                for i in numbers:
                    if not abs(attach[1] - float(i)) < 2:
                        if not abs(attach[2] - float(i)) < 2:
                            if attach[0] == 'payment':
                                output = (
                                    'Looks like your annuity payments '
                                    'calculations aren\'t working properly. '
                                    'Correct annuity payment and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            else:
                                output = (
                                    'Looks like your loan principal '
                                    'calculations aren\'t working properly. '
                                    'Correct loan principal and overpayment are '
                                    '[ {0}, {1} ]'
                                    ', but you output: {2}'
                                )
                            return CheckResult.wrong(
                                output.format(attach[2], attach[1], numbers),
                            )

                return CheckResult.correct()

            if isinstance(attach, list):
                if (len(numbers) + 1) / 2 < len(attach):
                    user_numbers = numbers[1::2]
                    if numbers[-1] not in user_numbers:
                        user_numbers.append(numbers[-1])
                    return CheckResult.wrong(
                        'Not enough values for diff payment in the answer '
                        'must be {0} with overpayment {1}, but you output: {2}'
                        .format(attach[:-1], attach[-1], user_numbers)
                    )

                for figure in attach:
                    flag = False
                    for number in numbers:
                        if abs(float(number) - figure) < 2:
                            flag = True
                            break
                    if flag is False:
                        user_numbers = numbers[1::2]
                        if numbers[-1] not in user_numbers:
                            user_numbers.append(numbers[-1])
                        return CheckResult.wrong(
                            'Incorrect result '
                            'must be {0} with overpayment {1}, but you output: {2}'
                            .format(attach[:-1], attach[-1], user_numbers)
                        )

            return CheckResult.correct()


    if __name__ == '__main__':
        LoanCalcTest('creditcalc.creditcalc').run_tests()
  learner_created: false
feedback_link: https://hyperskill.org/projects/90/stages/503/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/90/stages/503/implement">JetBrains
    Academy</a>
  time: Thu, 08 Oct 2020 21:16:52 UTC
record: -1
